generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProductCategory {
  salad
  drinks
  main
}

enum Size {
  standard
  large
}

enum AddOns {
  redRice
  potatoSalad
  brownToast
  noAddOns
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETE
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  DELIVERED
}

enum ProductStatus {
  onSale
  notAvailable
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  todos                 Todo[]
  Cart                  Cart?
  userOrder             UserOrder[]

  @@map("users")
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  items  CartItem[] // Relation to multiple CartItems
  user   User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String // Reference to the Cart
  productId  String
  quantity   Int      @default(1)
  addedOn    DateTime @default(now())
  sizeOption Size     @default(standard)
  sideOption AddOns   @default(brownToast)
  extraPrice Float    @default(0)
  itemTotal  Float
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, sizeOption, sideOption])
  @@map("cart_items")
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  category    ProductCategory
  status      ProductStatus   @default(onSale)
  CartItem    CartItem[]
  orderItem   OrderItem[]

  @@map("products")
}

model OrderItem {
  id         String    @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  sizeOption Size
  sideOption AddOns
  extraPrice Float
  price      Float
  userOrder  UserOrder @relation(fields: [orderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model UserOrder {
  id              String         @id @default(cuid())
  userId          String
  orderItems      OrderItem[]
  orderPrice      Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deliveryAddress String?
  amountReceived  Float?
  clientEmail     String?
  status          OrderStatus    @default(PENDING)
  deliveryStatus  DeliveryStatus @default(PENDING)
  user            User           @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Todo {
  id       String   @id @default(cuid())
  content  String
  postDate DateTime @default(now())
  userId   String   @map("user_id")
  user     User     @relation(fields: [userId], references: [id])

  @@map("todos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
